/*
 * Copyright 2015 Marvin Ramin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'

group 'com.mtramin'
version versions.name

android {
	compileSdkVersion versions.compileSdk
	buildToolsVersion versions.buildTools

	defaultConfig {
		minSdkVersion versions.minSdk
		targetSdkVersion versions.targetSdk
		versionCode versions.code
		versionName versions.name
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
		checkTypes {
			javaCompileOptions.annotationProcessorOptions.
					classNames.add("org.checkerframework.checker.crypto.CryptoChecker")
			// Uncomment to do the strongboxbacked checking.
			// javaCompileOptions.annotationProcessorOptions.arguments.put("lint", "strongboxbacked")
			javaCompileOptions.annotationProcessorOptions.arguments.put("stubs", "hardwarebacked.astub")
		}
	}

	lintOptions {
		textReport true
	}

	testOptions {
		unitTests.all {
			testLogging {
				events 'passed', 'skipped', 'failed'
				exceptionFormat 'full'
			}
		}
	}

	compileOptions {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}
}

repositories {
	mavenLocal()
}

configurations {
	checkerFrameworkAnnotatedJDK {
		description = 'a copy of JDK classes with Checker Framework type qualifiers inserted'
	}
	errorproneJavac {
		description = 'required to run the Checker Framework.'
	}
}

dependencies {
	compileOnly libraries.supportAnnotations
	api libraries.rxJava

	testImplementation libraries.jUnit
	testImplementation libraries.mockito
	testImplementation libraries.powermockJUnit
	testImplementation libraries.powermockMockito

	ext.checkerFrameworkVersion = '3.1.1'
	annotationProcessor "org.checkerframework:crypto-checker:0.1-SNAPSHOT"
	implementation files("../../../../crypto-checker-qual-android/build/libs/crypto-checker-qual-android.jar")
	checkerFrameworkAnnotatedJDK files("../../../../jdk8.jar")
	compileOnly "org.checkerframework:checker-qual-android:${checkerFrameworkVersion}"
	errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile).all { compile ->
		if (compile.name.contains("CheckTypes")) {
			compile.options.compilerArgs += [
					"-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}"
			]
			options.fork = true
			options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"]
		}
	}
}
//apply from: 'publish.gradle'
